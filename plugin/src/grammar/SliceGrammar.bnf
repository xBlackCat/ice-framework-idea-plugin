{
    parserClass="org.xblackcat.frozenidea.parser.SliceParser"
    parserUtilClass="org.xblackcat.frozenidea.parser.SliceParserUtil"

    implements="org.xblackcat.frozenidea.psi.SliceCompositeElement"
    extends="org.xblackcat.frozenidea.psi.impl.SliceCompositeElementImpl"

    psiClassPrefix="Slice"
    psiImplClassSuffix="Impl"
    psiPackage="org.xblackcat.frozenidea.psi"
    psiImplPackage="org.xblackcat.frozenidea.psi.impl"
    psiImplUtilClass="org.xblackcat.frozenidea.psi.impl.SlicePsiImplUtil"

    elementTypeHolderClass="org.xblackcat.frozenidea.psi.SliceTypes"
    elementTypePrefix="ICE_"
    elementTypeClass="org.xblackcat.frozenidea.psi.SliceCompositeElementType"
    tokenTypeClass="org.xblackcat.frozenidea.psi.SliceTokenType"
//    elementTypeFactory="org.xblackcat.frozenidea.psi.TokenFactory.getElement"
//    tokenTypeFactory="org.xblackcat.frozenidea.psi.TokenFactory.getToken"

    // Tokens
    tokens=[
        end_of_line_comment="regexp://.*"
        doc_style_comment="regexp:/\*\*([^*]|\*+[^*/])*(\*+/)?"
        c_style_comment="regexp:/\*[^*]([^*]|\*+[^*/])*(\*+/)?"
        escape_sequence="regexp:\\[^\n\r]"
        bad_string="regexp:\"([^\\\"\r\n]|{ESCAPE_SEQUENCE})*"
        string_value="regexp:{BAD_STRING}\""

        id="regexp:\\?\p{Alpha}\w*"
        float_value="regexp:(((\.\d+)|(\d+\.\d*))([Ee][+-]?\d+)?[FfDd]?)|(\d+([Ee][+-]?\d+)[FfDd]?)|(\d+[FfDd])"
        integer_value="regexp:((0|([1-9]\d*))|(0x[0-9A-Fa-f]+)|(0[0-7]+))(L|l)?"

        directive="regexp:#.+"

        EQ="="
        SEMICOLON=";"
        COMA=","
        ASTERISK="*"
        LT="<"
        GT=">"
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        OPEN_GL_MD="[["
        CLOSE_GL_MD="]]"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        LEFT_PARENTH="("
        RIGHT_PARENTH=")"
        NAME_SEPARATOR="::"

        KW_VOID="void"

        // Primitive data types
        KW_BOOL="bool"
        KW_BYTE="byte"
        KW_SHORT="short"
        KW_INT="int"
        KW_LONG="long"
        KW_FLOAT="float"
        KW_DOUBLE="double"

        // Simple data types
        KW_LOCAL_OBJECT="LocalObject"
        KW_STRING="string"
        KW_OBJECT="Object"

        // Composite data type declarations
        KW_CLASS="class"
        KW_EXCEPTION="exception"
        KW_INTERFACE="interface"
        KW_SEQUENCE="sequence"
        KW_STRUCT="struct"
        KW_DICTIONARY="dictionary"
        KW_ENUM="enum"

        //
        // Other keywords
        //

        // Boolean data type allowed values
        KW_FALSE="false"
        KW_TRUE="true"

        // Parameter modifier list
        KW_OUT="out"

        // Method modifier list
        KW_LOCAL="local"
        KW_IDEMPOTENT="idempotent"

        // Other keywords
        KW_MODULE="module"
        KW_CONST="const"
        KW_THROWS="throws"
        KW_EXTENDS="extends"
        KW_IMPLEMENTS="implements"
    ]

    implements("class_def|interface_def|exception_def|enum_def|struct_def|sequence_def|dictionary_def")="org.xblackcat.frozenidea.psi.SliceDataTypeElement"
    extends("class_def|interface_def|exception_def|enum_def|struct_def|sequence_def|dictionary_def")="org.xblackcat.frozenidea.psi.impl.SliceDataTypeElementImpl"
    extends("method_def")="org.xblackcat.frozenidea.psi.impl.SliceMethodElementImpl"
    implements("method_def")="org.xblackcat.frozenidea.psi.SliceMethodElement"
    implements(".*_def|module|enum_constant")="org.xblackcat.frozenidea.psi.SliceNamedElement"
    extends(".*_def|module|enum_constant")="org.xblackcat.frozenidea.psi.impl.SliceNamedElementImpl"
}

root ::= slice_block
private slice_block ::= !<<eof>> global_metadata_list module_list

private module_list ::= (module)* {recoverWhile=element_recovery}
module ::= metadata? 'module' id '{' module_body '}' ';' {pin=2}
private module_body ::= (';' | module_element) * {recoverWhile = body_element_list_recovery}

private module_element ::= (constant_def | data_definition | module) {recoverWhile=element_recovery}
private element_recovery ::= !('[' | 'const' | 'module' | 'class' | 'exception' | 'interface' | 'sequence' | 'struct' | 'dictionary' | 'enum' | '}' | <<eof>>)

private global_metadata_list ::= (global_metadata)* {recoverWhile=global_metadata_recovery}
private global_metadata_recovery ::= !(module | global_metadata | metadata)

global_metadata ::= '[[' global_metadata_body? ']]' {pin=1}
private global_metadata_body ::= metadata_element (',' metadata_element)* {recoverWhile=global_metadata_element_recovery}

metadata ::= '[' metadata_body? ']' {pin=1}
private metadata_body ::= metadata_element (',' metadata_element)* {recoverWhile=metadata_element_recovery}
metadata_element ::= string_literal | bad_string
private global_metadata_element_recovery ::= !(']]' | global_metadata | module)
private metadata_element_recovery ::= !(']' | module | element_recovery)

string_literal ::= string_value {
    methods=[
        getValue
    ]
}

integer_literal ::= integer_value {
    methods=[
        getValue
    ]
}

float_literal ::= float_value {
    methods=[
        getValue
    ]
}

number_literal ::= integer_literal | float_literal;

// Boolean data type allowed values
bool_literal ::= 'false' | 'true' {
    methods=[
        getValue
    ]
}

private data_definition ::= (class_def | interface_def | exception_def | struct_def | enum_def | sequence_def | dictionary_def )

extends_def ::= 'extends' extends_list {pin=1}
extends_list ::= type_reference (',' type_reference) * {recoverWhile=extends_list_recovery}
private extends_list_recovery ::= !('implements' | ';' | '{')
implements_def ::= 'implements' extends_list  {pin=1}

private body_element_recovery ::= !(field_def | method_def | enum_constant | constant_def | '}' | '[')

// --- Class ---
class_def ::= metadata* 'class' id extends_def? implements_def? class_body? ';' {pin=2}
class_body ::= '{' class_element_list '}' {pin=1 recoverWhile=body_block_recovery}
private body_block_recovery ::= !(';')
private class_element_list ::= class_element * {recoverWhile=body_element_list_recovery}
private body_element_list_recovery ::= !('}')
private class_element ::= (';' | method_def | field_def) {recoverWhile=body_element_recovery}

// --- Interface ---
interface_def ::= metadata* 'interface' id extends_def? interface_body? ';' {pin=2}
interface_body ::= '{' interface_element_list '}' {pin=1 recoverWhile=body_block_recovery}
private interface_element_list ::= interface_element * {recoverWhile=body_element_list_recovery}
private interface_element ::= (';' | method_def) {recoverWhile = body_element_recovery}

// --- Exceptions ---
exception_def ::= metadata* 'exception' id extends_def? '{' field_element_list '}' ';' {pin=2}
private field_element_list ::= field_element * {recoverWhile = body_element_list_recovery}
private field_element ::= (';' | field_def) {recoverWhile = body_element_recovery}

// --- Structures ---
struct_def ::= metadata* 'struct' id '{' field_element_list '}' ';' {pin=2}

// --- Enums ---
enum_def ::= metadata* 'enum' id '{' enum_constant_list '}' ';' {pin=2}
enum_constant_list ::= enum_constant (',' enum_constant) * {recoverWhile=body_element_list_recovery}
enum_constant_initializer ::= '=' number_literal {pin=1 methods = [getConstant]}
enum_constant ::= id enum_constant_initializer? {pin = 1}

element_type ::= data_type
key_type ::= primitive_data_types | 'string' | type_reference 
private type_recovery ::= !('>')
// --- Sequences ---
sequence_def ::= metadata* 'sequence' '<' sequence_type_list '>' id ';' {pin=2}
sequence_type_list ::= element_type {recoverWhile = type_recovery}

// --- Dictionaries ---
dictionary_def ::= metadata* 'dictionary' '<' dictionary_type_list '>' id ';' {pin=2}
dictionary_type_list ::= key_type ',' element_type {recoverWhile = type_recovery}

// --- Other ---
module_path ::= path_element*
private path_element ::= id '::' {pin=2}

type_reference ::= module_path id {
    methods = [getReferences getReference]
}
enum_constant_reference ::= id {
    methods = [getReferences getReference]
}
proxy_type ::= (type_reference | simple_data_types) '*'
data_type ::= proxy_type | type_reference | primitive_data_types | simple_data_types

// -- method --
modifier ::= 'idempotent' | 'local'
method_return_type ::= data_type | 'void'

method_def ::= metadata* modifier* method_return_type id '(' parameters_list ')' (throws_def)? ';' {pin=5}
throws_def ::= 'throws' throws_list {pin=1}
throws_list ::= type_reference (',' type_reference) * {recoverWhile=throws_list_recovery}
private throws_list_recovery ::= !(';' | '{')

parameter_modifier ::= 'out'

parameters_list ::= (parameter (',' parameter) *)? {recoverWhile=parameter_list_recovery}
parameter ::= metadata* parameter_modifier* data_type id {pin=3}

private parameter_list_recovery ::= !(')')

constant_value ::= (number_literal | bool_literal | string_literal | enum_constant_reference)

variable_type ::= data_type

field_initializer ::= '=' constant_value {pin=1}

field_def ::= metadata* variable_type id (field_initializer )? ';' {pin=2}

constant_def ::= metadata* 'const' variable_type id field_initializer ';' {pin=2}

//
// Data types
//

// Primitive data types
private primitive_data_types ::= 'float' | 'double' | 'bool' | 'byte' | 'short' | 'int' | 'long'

// Simple data types
private simple_data_types ::= 'LocalObject' | 'string' | 'Object'

