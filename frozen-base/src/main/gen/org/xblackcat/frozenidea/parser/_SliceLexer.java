/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.xblackcat.frozenidea.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.xblackcat.frozenidea.psi.SliceTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_SliceLexer.flex</tt>
 */
public class _SliceLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\7\1\26\4\0\1\40\1\41\1\5\1\16\1\31\1"+
    "\16\1\13\1\4\1\20\7\23\2\14\1\42\1\30\1\32\1\27\1\33\2\0\3\22\1\17\1\15\1"+
    "\17\5\12\1\24\2\12\1\64\13\12\1\36\1\6\1\37\1\0\1\11\1\0\1\61\1\47\1\63\1"+
    "\46\1\52\1\60\1\57\1\54\1\45\1\65\1\12\1\25\1\70\1\56\1\44\1\66\1\67\1\55"+
    "\1\53\1\51\1\62\1\43\1\71\1\21\1\50\1\12\1\34\1\0\1\35\7\0\1\1\12\0\1\3\11"+
    "\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0\12\10\4\0\14\10\16\0\5\10\7\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\0\2\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1"+
    "\0\4\10\1\0\23\10\1\0\13\10\10\0\6\10\1\0\26\10\2\0\1\10\6\0\10\10\10\0\13"+
    "\10\5\0\3\10\33\0\6\10\1\0\1\10\17\0\2\10\7\0\2\10\12\0\3\10\2\0\2\10\1\0"+
    "\16\10\15\0\11\10\13\0\1\10\30\0\6\10\4\0\2\10\4\0\1\10\5\0\6\10\4\0\1\10"+
    "\11\0\1\10\3\0\1\10\7\0\11\10\7\0\5\10\1\0\10\10\6\0\26\10\3\0\1\10\2\0\1"+
    "\10\7\0\11\10\4\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\20\0\1\10\15\0\2\10\1\0\1\10\5\0\6\10\4\0\2\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\17\0\4\10\1\0\1\10\3\0\3\10\20\0\11\10\1\0\2\10\1\0\2\10\1\0\5\10\3"+
    "\0\1\10\2\0\1\10\30\0\1\10\13\0\10\10\2\0\1\10\3\0\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\13\0\10\10"+
    "\1\0\2\10\10\0\3\10\5\0\1\10\4\0\10\10\1\0\6\10\1\0\5\10\3\0\1\10\3\0\2\10"+
    "\15\0\13\10\2\0\1\10\6\0\3\10\10\0\1\10\5\0\22\10\3\0\10\10\1\0\11\10\1\0"+
    "\1\10\2\0\7\10\11\0\1\10\1\0\2\10\15\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\0\2"+
    "\10\11\0\1\10\2\0\5\10\1\0\1\10\25\0\14\10\1\0\24\10\13\0\5\10\22\0\7\10\4"+
    "\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10\1\0\6\10\1\0\1\10\5"+
    "\0\1\10\2\0\13\10\1\0\15\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\1\10\1"+
    "\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\16\10\2\0\6\10\2\0\15\10\2\0\1\10\1"+
    "\3\17\10\1\0\10\10\7\0\15\10\1\0\6\10\23\0\1\10\4\0\1\10\3\0\5\10\2\0\22\10"+
    "\1\0\1\10\5\0\17\10\1\0\16\10\2\0\5\10\13\0\14\10\13\0\1\10\15\0\7\10\7\0"+
    "\16\10\15\0\2\10\11\0\4\10\1\0\4\10\3\0\2\10\11\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4"+
    "\0\13\3\15\0\2\1\5\0\1\3\17\0\1\3\1\0\1\10\15\0\1\10\2\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0"+
    "\4\10\5\0\5\10\4\0\1\10\4\0\2\10\13\0\5\10\6\0\4\10\3\0\2\10\14\0\10\10\7"+
    "\0\10\10\1\0\7\10\1\0\1\3\4\0\2\10\12\0\5\10\5\0\2\10\3\0\7\10\6\0\3\10\12"+
    "\0\2\10\13\0\11\10\2\0\27\10\2\0\7\10\1\0\3\10\1\0\4\10\1\0\4\10\2\0\6\10"+
    "\3\0\1\10\1\0\1\10\2\0\5\10\1\0\12\10\12\0\5\10\1\0\3\10\1\0\10\10\4\0\7\10"+
    "\3\0\1\10\3\0\2\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10"+
    "\3\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\4\0\5\10\3\0\5\10\5\0\1\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\12\10\6\0\12\10\2\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\14\10\1\0\16\10\1\0\2\10\1\0\2\10\1\0\10\10\6\0\4\10"+
    "\4\0\16\10\2\0\1\10\1\0\14\10\1\0\2\10\3\0\1\10\2\0\4\10\1\0\2\10\12\0\10"+
    "\10\6\0\6\10\1\0\3\10\1\0\12\10\3\0\1\10\12\0\4\10\25\0\1\10\1\0\1\10\3\0"+
    "\7\10\1\0\1\10\1\0\4\10\1\0\17\10\1\0\2\10\14\0\3\10\7\0\4\10\11\0\2\10\1"+
    "\0\1\10\20\0\4\10\10\0\1\10\13\0\10\10\5\0\3\10\2\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\0\14\10\1\0\1\10\1\0\7\10\1\0\21\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\14"+
    "\10\1\0\4\10\1\0\5\10\1\0\1\10\3\0\14\10\2\0\10\10\1\0\2\10\1\0\1\10\2\0\1"+
    "\10\1\0\12\10\1\0\4\10\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1"+
    "\10\1\0\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\0\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10\1\0\12\10"+
    "\1\0\5\10\1\0\3\10\1\0\5\10\1\0\5\10");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\2\6\2\5\1\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\1"+
    "\14\5\1\22\1\0\2\23\1\0\1\24\1\25\1\0"+
    "\1\25\1\6\1\0\1\6\1\0\2\5\1\26\1\27"+
    "\1\30\1\31\26\5\1\32\1\33\1\25\1\0\1\6"+
    "\4\5\1\34\1\5\1\35\23\5\2\0\1\5\1\36"+
    "\1\5\1\37\5\5\1\40\1\41\1\5\1\42\2\5"+
    "\1\43\12\5\1\32\1\33\1\5\1\44\13\5\1\45"+
    "\1\46\1\47\1\50\1\51\6\5\1\52\1\5\1\53"+
    "\2\5\1\54\1\55\1\5\1\56\1\57\5\5\1\60"+
    "\10\5\1\61\2\5\1\62\2\5\1\63\1\5\1\64"+
    "\1\65\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\u02f2\0\u032c\0\72"+
    "\0\72\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\72\0\u015c\0\u06cc\0\72\0\u0706\0\u0740\0\72\0\72"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u02b8\0\72\0\72"+
    "\0\72\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u015c\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u015c\0\u1512\0\u015c\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u015c\0\u015c\0\u166e\0\u015c\0\u16a8\0\u16e2\0\u015c"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\72\0\72\0\u1960\0\u015c\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u015c\0\u015c\0\u015c\0\u015c\0\u015c\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u015c\0\u1d74\0\u015c\0\u1dae"+
    "\0\u1de8\0\u015c\0\u015c\0\u1e22\0\u015c\0\u015c\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u015c\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u015c\0\u214e\0\u2188\0\u015c"+
    "\0\u21c2\0\u21fc\0\u015c\0\u2236\0\u015c\0\u015c\0\u015c\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\10\1\11\1\12\1\10\1\2\1\10\1\13\2\10"+
    "\1\12\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\10\1\40\1\41"+
    "\1\42\4\10\1\43\2\10\1\44\1\45\3\10\1\46"+
    "\1\10\73\0\3\3\72\0\1\47\1\50\64\0\2\51"+
    "\1\0\5\51\1\52\1\51\1\52\2\51\1\52\1\51"+
    "\1\52\1\51\2\52\1\51\2\52\15\51\27\52\2\7"+
    "\1\0\3\7\1\53\1\54\62\7\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\27\10\14\0\1\55\3\0"+
    "\1\55\2\0\1\55\61\0\1\55\1\12\1\56\1\0"+
    "\1\57\1\12\2\0\1\12\2\60\20\0\1\57\3\0"+
    "\1\56\5\0\1\57\24\0\1\55\1\61\1\56\1\0"+
    "\1\57\1\62\1\63\1\0\1\62\2\60\20\0\1\57"+
    "\3\0\1\56\5\0\1\57\22\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\64\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\1\10\1\65\25\10"+
    "\1\66\2\0\67\66\36\0\1\67\72\0\1\70\74\0"+
    "\1\71\40\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\1\10\1\72\25\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\17\10\1\73\7\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\3\10\1\74\7\10\1\75"+
    "\11\10\1\76\1\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\1\10\1\77\1\100\24\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\1\10\1\101\3\10"+
    "\1\102\21\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\11\10\1\103\1\104\14\10\11\0\2\10\1\0"+
    "\2\10\1\0\2\10\1\105\4\10\15\0\13\10\1\106"+
    "\13\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\6\10\1\107\1\110\1\10\1\111\15\10\11\0\2\10"+
    "\1\0\2\10\1\0\6\10\1\112\15\0\16\10\1\113"+
    "\10\10\11\0\2\10\1\0\2\10\1\0\6\10\1\114"+
    "\15\0\1\10\1\115\25\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\4\10\1\116\22\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\1\10\1\117\25\10"+
    "\1\47\2\0\67\47\5\120\1\121\64\120\2\7\1\0"+
    "\67\7\14\0\1\55\1\56\1\0\1\57\1\55\2\0"+
    "\1\55\22\0\1\57\3\0\1\56\5\0\1\57\25\0"+
    "\1\122\1\0\1\123\1\0\1\122\2\0\1\122\61\0"+
    "\1\55\1\61\1\56\1\0\1\57\1\61\2\0\1\61"+
    "\22\0\1\57\3\0\1\56\5\0\1\57\24\0\1\55"+
    "\1\61\1\56\1\0\1\57\1\62\2\0\1\62\2\60"+
    "\20\0\1\57\3\0\1\56\5\0\1\57\25\0\2\124"+
    "\1\0\2\124\1\0\2\124\22\0\2\124\2\0\1\124"+
    "\5\0\2\124\1\0\1\124\17\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\20\10\1\125\6\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\13\10\1\126\4\10"+
    "\1\127\6\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\2\10\1\130\24\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\131\20\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\7\10\1\132\17\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\133\20\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\23\10\1\134\3\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\17\10\1\135\7\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\20\10\1\136\6\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\137\25\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\140\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\12\10\1\141\14\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\17\10\1\142\7\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\143\11\10\1\144\6\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\17\10\1\145\7\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\12\10\1\146\14\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\24\10"+
    "\1\147\2\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\1\10\1\150\25\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\151\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\6\10\1\152\15\0\27\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\16\10\1\153"+
    "\10\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\13\10\1\154\13\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\22\10\1\155\4\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\3\10\1\156\23\10\5\120"+
    "\1\157\64\120\5\121\1\160\64\121\14\0\1\122\2\0"+
    "\1\57\1\122\2\0\1\122\22\0\1\57\11\0\1\57"+
    "\25\0\1\122\3\0\1\122\2\0\1\122\62\0\2\124"+
    "\1\0\2\124\1\0\2\124\2\60\20\0\2\124\2\0"+
    "\1\124\5\0\2\124\1\0\1\124\17\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\16\10\1\161\10\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\14\10\1\162"+
    "\12\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\16\10\1\163\10\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\3\10\1\164\23\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\25\10\1\165\1\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\166"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\6\10\1\167"+
    "\15\0\27\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\4\10\1\170\22\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\171\20\10\11\0\2\10"+
    "\1\0\2\10\1\0\6\10\1\172\15\0\27\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\173"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\1\10\1\174\25\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\175\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\7\10\1\176\17\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\177"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\25\10\1\200\1\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\2\10\1\201\14\10\1\202\7\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\17\10\1\203"+
    "\7\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\12\10\1\204\14\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\16\10\1\205\10\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\10\10\1\206\16\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\10\10\1\207"+
    "\16\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\10\10\1\210\16\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\211\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\17\10\1\212\7\10\4\120"+
    "\1\213\1\157\64\120\4\121\1\214\1\160\64\121\11\0"+
    "\2\10\1\0\2\10\1\0\6\10\1\215\15\0\27\10"+
    "\11\0\2\10\1\0\2\10\1\0\6\10\1\216\15\0"+
    "\27\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\23\10\1\217\3\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\12\10\1\220\14\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\7\10\1\221\17\10\11\0"+
    "\2\10\1\0\2\10\1\0\6\10\1\222\15\0\27\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\2\10"+
    "\1\223\24\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\26\10\1\224\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\13\10\1\225\13\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\23\10\1\226\3\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\13\10\1\227"+
    "\13\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\20\10\1\230\6\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\231\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\6\10\1\232\20\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\6\10\1\233"+
    "\20\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\7\10\1\234\17\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\10\10\1\235\16\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\6\10\1\236\20\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\20\10\1\237"+
    "\6\10\11\0\2\10\1\0\2\10\1\0\6\10\1\240"+
    "\15\0\27\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\21\10\1\241\5\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\242\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\15\10\1\243\11\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\25\10"+
    "\1\244\1\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\7\10\1\245\17\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\246\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\10\10\1\247\16\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\3\10"+
    "\1\250\23\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\251\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\14\10\1\252\12\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\253\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\13\10"+
    "\1\254\13\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\255\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\7\10\1\256\17\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\4\10\1\257\22\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\260\20\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\16\10\1\261\10\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\7\10\1\262\17\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\13\10\1\263\13\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\10\10"+
    "\1\264\16\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\2\10\1\265\24\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\20\10\1\266\6\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\22\10\1\267\4\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\7\10"+
    "\1\270\17\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\20\10\1\271\6\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\13\10\1\272\13\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\16\10\1\273\10\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\274\25\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\7\10\1\275\17\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\7\10\1\276\17\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\13\10\1\277\13\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\7\10"+
    "\1\300\17\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\301\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\12\10\1\302\14\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\13\10\1\303\13\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\20\10"+
    "\1\304\6\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\305\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\10\10\1\306\16\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\5\10\1\307\21\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\310\20\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\7\11\2\1\2\11"+
    "\16\1\1\0\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\2\11\1\0\1\1\1\0\3\1\3\11\31\1\1\0"+
    "\33\1\2\0\32\1\2\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SliceLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SliceLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 3: 
            { return ICE_ASTERISK;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return ICE_BAD_STRING;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return ICE_ID;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return ICE_INTEGER_VALUE;
            } 
            // fall through
          case 61: break;
          case 7: 
            { return ICE_EQ;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return ICE_SEMICOLON;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return ICE_COMMA;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return ICE_LT;
            } 
            // fall through
          case 65: break;
          case 11: 
            { return ICE_GT;
            } 
            // fall through
          case 66: break;
          case 12: 
            { return ICE_LEFT_BRACE;
            } 
            // fall through
          case 67: break;
          case 13: 
            { return ICE_RIGHT_BRACE;
            } 
            // fall through
          case 68: break;
          case 14: 
            { return ICE_LEFT_BRACKET;
            } 
            // fall through
          case 69: break;
          case 15: 
            { return ICE_RIGHT_BRACKET;
            } 
            // fall through
          case 70: break;
          case 16: 
            { return ICE_LEFT_PARENTH;
            } 
            // fall through
          case 71: break;
          case 17: 
            { return ICE_RIGHT_PARENTH;
            } 
            // fall through
          case 72: break;
          case 18: 
            { return ICE_END_OF_LINE_COMMENT;
            } 
            // fall through
          case 73: break;
          case 19: 
            { return ICE_ESCAPE_SEQUENCE;
            } 
            // fall through
          case 74: break;
          case 20: 
            { return ICE_STRING_VALUE;
            } 
            // fall through
          case 75: break;
          case 21: 
            { return ICE_FLOAT_VALUE;
            } 
            // fall through
          case 76: break;
          case 22: 
            { return ICE_DIRECTIVE;
            } 
            // fall through
          case 77: break;
          case 23: 
            { return ICE_OPEN_GL_MD;
            } 
            // fall through
          case 78: break;
          case 24: 
            { return ICE_CLOSE_GL_MD;
            } 
            // fall through
          case 79: break;
          case 25: 
            { return ICE_NAME_SEPARATOR;
            } 
            // fall through
          case 80: break;
          case 26: 
            { return ICE_C_STYLE_COMMENT;
            } 
            // fall through
          case 81: break;
          case 27: 
            { return ICE_DOC_STYLE_COMMENT;
            } 
            // fall through
          case 82: break;
          case 28: 
            { return ICE_KW_OUT;
            } 
            // fall through
          case 83: break;
          case 29: 
            { return ICE_KW_INT;
            } 
            // fall through
          case 84: break;
          case 30: 
            { return ICE_KW_LONG;
            } 
            // fall through
          case 85: break;
          case 31: 
            { return ICE_KW_VOID;
            } 
            // fall through
          case 86: break;
          case 32: 
            { return ICE_KW_BOOL;
            } 
            // fall through
          case 87: break;
          case 33: 
            { return ICE_KW_BYTE;
            } 
            // fall through
          case 88: break;
          case 34: 
            { return ICE_KW_TRUE;
            } 
            // fall through
          case 89: break;
          case 35: 
            { return ICE_KW_ENUM;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return ICE_KW_LOCAL;
            } 
            // fall through
          case 91: break;
          case 37: 
            { return ICE_KW_SHORT;
            } 
            // fall through
          case 92: break;
          case 38: 
            { return ICE_KW_FLOAT;
            } 
            // fall through
          case 93: break;
          case 39: 
            { return ICE_KW_FALSE;
            } 
            // fall through
          case 94: break;
          case 40: 
            { return ICE_KW_CLASS;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return ICE_KW_CONST;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return ICE_KW_DOUBLE;
            } 
            // fall through
          case 97: break;
          case 43: 
            { return ICE_KW_THROWS;
            } 
            // fall through
          case 98: break;
          case 44: 
            { return ICE_KW_STRING;
            } 
            // fall through
          case 99: break;
          case 45: 
            { return ICE_KW_STRUCT;
            } 
            // fall through
          case 100: break;
          case 46: 
            { return ICE_KW_OBJECT;
            } 
            // fall through
          case 101: break;
          case 47: 
            { return ICE_KW_MODULE;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return ICE_KW_EXTENDS;
            } 
            // fall through
          case 103: break;
          case 49: 
            { return ICE_KW_SEQUENCE;
            } 
            // fall through
          case 104: break;
          case 50: 
            { return ICE_KW_INTERFACE;
            } 
            // fall through
          case 105: break;
          case 51: 
            { return ICE_KW_EXCEPTION;
            } 
            // fall through
          case 106: break;
          case 52: 
            { return ICE_KW_IDEMPOTENT;
            } 
            // fall through
          case 107: break;
          case 53: 
            { return ICE_KW_IMPLEMENTS;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return ICE_KW_DICTIONARY;
            } 
            // fall through
          case 109: break;
          case 55: 
            { return ICE_KW_LOCAL_OBJECT;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
