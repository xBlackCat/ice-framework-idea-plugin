{
    parserClass="org.xblackcat.frozenidea.parser.SliceParser"
    parserUtilClass="org.xblackcat.frozenidea.parser.SliceParserUtil"

    implements="org.xblackcat.frozenidea.psi.SliceCompositeElement"
    extends="org.xblackcat.frozenidea.psi.impl.SliceCompositeElementImpl"

    psiClassPrefix="Slice"
    psiImplClassSuffix="Impl"
    psiPackage="org.xblackcat.frozenidea.psi"
    psiImplPackage="org.xblackcat.frozenidea.psi.impl"
    psiImplUtilClass="org.xblackcat.frozenidea.psi.impl.SlicePsiImplUtil"

    elementTypeHolderClass="org.xblackcat.frozenidea.psi.SliceTypes"
    elementTypePrefix="ICE_"
    elementTypeClass="org.xblackcat.frozenidea.psi.SliceCompositeElementType"
    tokenTypeClass="org.xblackcat.frozenidea.psi.SliceTokenType"
//    elementTypeFactory="org.xblackcat.frozenidea.psi.TokenFactory.getElement"
//    tokenTypeFactory="org.xblackcat.frozenidea.psi.TokenFactory.getToken"

    // Tokens
    tokens=[
        end_of_line_comment="regexp://.*"
        doc_style_comment="regexp:/\*\*([^*]|\*+[^*/])*(\*+/)?"
        c_style_comment="regexp:/\*[^*]([^*]|\*+[^*/])*(\*+/)?"
        escape_sequence="regexp:\\[^\n\r]"
        bad_string="regexp:\"([^\\\"\r\n]|{ESCAPE_SEQUENCE})*"
        string_value="regexp:{BAD_STRING}\""

        id="regexp:\\?\p{Alpha}\w*"
        float_value="regexp:(((\.\d+)|(\d+\.\d*))([Ee][+-]?\d+)?[FfDd]?)|(\d+([Ee][+-]?\d+)[FfDd]?)|(\d+[FfDd])"
        integer_value="regexp:((0|([1-9]\d*))|(0x[0-9A-Fa-f]+)|(0[0-7]+))(L|l)?"

        directive="regexp:#.+"

        EQ="="
        SEMICOLON=";"
        COMA=","
        ASTERISK="*"
        LT="<"
        GT=">"
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        OPEN_GL_MD="[["
        CLOSE_GL_MD="]]"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        LEFT_PARENTH="("
        RIGHT_PARENTH=")"
        NAME_SEPARATOR="::"

        KW_VOID="void"

        // Primitive data types
        KW_BOOL="bool"
        KW_BYTE="byte"
        KW_SHORT="short"
        KW_INT="int"
        KW_LONG="long"
        KW_FLOAT="float"
        KW_DOUBLE="double"

        // Simple data types
        KW_LOCAL_OBJECT="LocalObject"
        KW_STRING="string"
        KW_OBJECT="Object"

        // Composite data type declarations
        KW_CLASS="class"
        KW_EXCEPTION="exception"
        KW_INTERFACE="interface"
        KW_SEQUENCE="sequence"
        KW_STRUCT="struct"
        KW_DICTIONARY="dictionary"
        KW_ENUM="enum"

        //
        // Other keywords
        //

        // Boolean data type allowed values
        KW_FALSE="false"
        KW_TRUE="true"

        // Parameter modifier list
        KW_OUT="out"

        // Method modifier list
        KW_LOCAL="local"
        KW_IDEMPOTENT="idempotent"

        // Other keywords
        KW_MODULE="module"
        KW_CONST="const"
        KW_THROWS="throws"
        KW_EXTENDS="extends"
        KW_IMPLEMENTS="implements"
    ]

    extends("method_def|field_def|enum_constant")="org.xblackcat.frozenidea.psi.impl.SliceInnerElementImpl"
    implements("method_def|field_def|enum_constant")="org.xblackcat.frozenidea.psi.SliceInnerElement"
    implements("constant_def|parameter_def|field_def|enum_constant")="org.xblackcat.frozenidea.psi.SliceVariableElement"
    implements("extends_block|implements_block|throws_block")="org.xblackcat.frozenidea.psi.SliceReferenceListElement"
    implements(".*_def|data_type_element|module|enum_constant")="org.xblackcat.frozenidea.psi.SliceNamedElement"
    extends(".*_def|data_type_element|module|enum_constant")="org.xblackcat.frozenidea.psi.impl.SliceNamedElementImpl"
}

root ::= slice_block
private slice_block ::= !<<eof>> global_metadata module_list

private module_list ::= (module)* {recoverWhile=element_recovery}
module ::= metadata 'module' id module_body ';' { pin=2 }
module_body ::= '{' module_element_list '}' { pin=1 }
private module_element_list ::= (';' | module_element) * {recoverWhile = body_element_list_recovery}

private module_element ::= (constant_def | data_type_element | module) {recoverWhile=element_recovery}
private element_recovery ::= !('[' | 'const' | 'module' | 'class' | 'exception' | 'interface' | 'sequence' | 'struct' | 'dictionary' | 'enum' | '}' | <<eof>>)

global_metadata ::= global_metadata_statement* {recoverWhile=global_metadata_recovery}
private global_metadata_recovery ::= !(module | global_metadata_statement | metadata_statement)

global_metadata_statement ::= '[[' global_metadata_body? ']]' {pin=1}
private global_metadata_body ::= metadata_element (',' metadata_element)* {recoverWhile=global_metadata_element_recovery}

metadata ::= metadata_statement*
metadata_statement ::= '[' metadata_body? ']' {pin=1}
private metadata_body ::= metadata_element (',' metadata_element)* {recoverWhile=metadata_element_recovery}
metadata_element ::= string_literal | bad_string
private global_metadata_element_recovery ::= !(']]' | module)
private metadata_element_recovery ::= !(']' | module | element_recovery)

string_literal ::= string_value {
    methods=[
        getValue
    ]
}

integer_literal ::= integer_value {
    methods=[
        getValue
    ]
}

float_literal ::= float_value {
    methods=[
        getValue
    ]
}

number_literal ::= integer_literal | float_literal;

// Boolean data type allowed values
bool_literal ::= 'false' | 'true' {
    methods=[
        getValue
    ]
}

data_type_element ::= metadata type_word generic_type? id extends_block? implements_block? body_block? ';' {
  pin=2
  methods=[
    isClass
    isInterface
    isException
    isEnum
    isStruct
    isSequence
    isDictionary
    getModule
    getQualifiedName
  ]
}
type_word ::= 'class'|'interface'|'exception'|'struct'|'enum'|'sequence'|'dictionary'
generic_type ::= '<' generic_types '>' {pin=1}
private generic_types ::= data_type second_generic_type? {recoverWhile=type_recovery}
second_generic_type ::= ',' data_type {pin=1}

body_block ::= '{' body_element_list '}' {pin=1 recoverWhile=body_block_recovery}
private body_element_list ::= body_element* {recoverWhile=body_element_list_recovery}

private body_element ::= (';' | ',' | method_def | field_def | enum_constant) {recoverWhile=body_element_recovery}

extends_block ::= 'extends' type_reference_list {pin=1}
private type_reference_list ::= type_reference (',' type_reference) * {recoverWhile=extends_list_recovery}
implements_block ::= 'implements' type_reference_list  {pin=1}

// Recovery rules
private extends_list_recovery ::= !('implements' | ';' | '{')
private body_element_recovery ::= !(field_def | method_def | enum_constant | constant_def | '}' | '[')
private body_block_recovery ::= !(';')
private body_element_list_recovery ::= !('}')
private type_recovery ::= !('>')

enum_constant ::= id field_initializer? ','? {pin = 1}

// --- Other ---
module_path ::= path_element*
private path_element ::= id '::' {pin=2}

type_reference ::= module_path id {
    methods = [getReferences getReference]
}
enum_constant_reference ::= id {
    methods = [getReferences getReference]
}
proxy_type ::= (type_reference | simple_data_types) '*'
data_type ::= proxy_type | type_reference | primitive_data_types | simple_data_types

// -- method --
modifier ::= 'idempotent' | 'local'
method_return_type ::= data_type | 'void'

method_def ::= metadata modifier* method_return_type id '(' parameters_list ')' (throws_block)? ';' {
  pin=5
  methods = [
    getParametersCount
  ]
}
throws_block ::= 'throws' type_reference_list {pin=1}

parameter_modifier ::= 'out'

parameters_list ::= (parameter_def (',' parameter_def) *)? {recoverWhile=parameter_list_recovery}
parameter_def ::= metadata parameter_modifier* data_type id {pin=3}

private parameter_list_recovery ::= !(')')

constant_value ::= (number_literal | bool_literal | string_literal | enum_constant_reference)

field_initializer ::= '=' constant_value {pin=1}

field_def ::= metadata data_type id (field_initializer )? ';' {pin=3}

constant_def ::= metadata 'const' data_type id field_initializer ';' {pin=2}

//
// Data types
//

// Primitive data types
private primitive_data_types ::= 'float' | 'double' | 'bool' | 'byte' | 'short' | 'int' | 'long'

// Simple data types
private simple_data_types ::= 'LocalObject' | 'string' | 'Object'

